#+OPTIONS:     H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t reveal_title_slide:nil reveal_global_footer:f
#+REVEAL_HIGHLIGHT_CSS: solarized
#+REVEAL_THEME: solarized
#+REVEAL_ROOT: ./reveal.js-3.8.0

* You're already doing TDD
* Decision-making
* Make better decisions
** Years ago I wrote this
#+begin_src ruby
  def same_modality?(documents)
    modalities = []
    documents.each do |document|
      unless modalities.include?(document.modality)
        modalities << document.modality
      end
    end
    modalities.size == 1
  end
#+end_src
** A year and a half later, I changed it to this
#+begin_src ruby
  documents.map(&:modality).uniq.size == 1
#+end_src
#+begin_notes
Knowing the tools at hand allowed me to recognize the problem as one that an existing tool solved
#+end_notes
* Big decisions are combinations of small decisions
* Cartesian method
1. Accept as true only what is indubitable.
2. Divide every question into manageable parts.
3. Begin with the simplest issues and ascend to the more complex.
4. Review frequently enough to retain the whole argument at once.
#+begin_notes
His reductive method also impoverished these domains in important ways, for it tended to restrict geometry to the study of straight line segments, physics to the study of ambiguously constituted bits of matter in motion,
#+end_notes
* Fermi questions
break a big measurement into smaller estimatable measurements
#+begin_notes
Fermi was present when the first atomic bomb was detonated. He let a few pieces of paper fall and, based on how far they traveled, estimated the force of the blast.

Fermi's estimate of 10 kilotons of TNT was well within an order of magnitude of the now-accepted value of 21 kilotons.

These were and may still be used in the Google interview process.
#+end_notes
** How many piano tuners are there in Chicago?
#+begin_notes
Straight from Wikipedia
#+end_notes
** Decompose
Number of pianos divided by number of tunings in a year

- # pianos?
- # pianos per tuner per day?
** How many pianos?
- # people in Chicago?
- # people per household?
- # households w/ regularly tuned piano?
** how many pianos per tuner per day?
- # hours per tuning?
- # hours per tuner?
** plug in some numbers
| variable             |      value |
|----------------------+------------|
| population           |         9M |
| people per household |          2 |
| houses w/ piano      |         20 |
|----------------------+------------|
| hours per tuning     |          2 |
| hours per tuner      | 50 * 5 * 8 |
#+begin_notes
50 * 5 * 8 = 2000
#+end_notes
** mix it all up
Number of pianos divided by number of tunings in a year

9000000 / 2 / 20 / (50 * 5 * 8 / 2)
** Boom
225
#+begin_notes
In 2009, the actual number of piano tuners in Chicago is about 290
#+end_notes
* Decompose
A big problem is a combination of small problems
* In programming
decomposition is called factoring
* Refactoring
Yep. re-factoring.
#+begin_notes
So when you change the bits of the system, you change the way it's decomposed!
#+end_notes
* Okay okay, TDD
Real talk now (wake up your neighbor)
